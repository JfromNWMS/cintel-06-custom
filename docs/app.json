[{"name": "app.py", "content": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pingouin import qqplot\nfrom scipy.stats import shapiro\nfrom math import ceil, sqrt\nfrom shiny.express import ui, input, render\nfrom shiny import reactive\nfrom faicons import icon_svg\n\niris_df = sns.load_dataset('iris')\niris_df.columns = [col_name.replace('_',' ').title() for col_name in iris_df.columns] \niris_df = iris_df.apply(lambda col: col.apply(lambda x: x.replace('_',' ').title()) if col.dtype == 'object' else col)\ncontinuous_variables = [name for name in iris_df.columns if name != 'Species']\n\nformat_dict: dict = {\n    'count': '{:.0f}'.format,\n    'min': '{:.1f}'.format,\n    'max': '{:.1f}'.format,\n    'std': '{:.3f}'.format,\n    'default': '{:.2f}'.format\n}\n\ndef format_describe(df_data: pd.DataFrame) -> pd.DataFrame:\n    return df_data.apply(lambda row: row.map(format_dict.get(row.name, format_dict['default'])), axis=1)\n\ndef is_norm_small(df_data: pd.DataFrame, by: str = None, ncol_fig: int = None, main_label: bool = True, confidence: float = 0.95) -> None:\n    \"\"\"\n    Function is_norm_small() takes in a pandas.DataFrame and plots normal Q-Q plots \n    for all columns of the dataframe in square configuration. The Shapiro-Wilk normality\n    test statistic and p-value are also calculated for each plot and placed in the upper \n    left corner of the plot.\n\n    Args:\n        df_data (pd.DataFrame): Input dataframe whose columns will be plotted over.\n        by (str): Name of categorical column in dataframe to plot by. Defaults to no categorical column.\n        ncol_fig (int): Number of columns to force the plot figure too.  Defaults to square configuration.\n        main_label (bool): True to remove the axis names from individual plots and places them as titles for main figure axes.\n        confidence (float): Level of confidence between 0 and 1 at which confidence intervals are displayed.\n    \"\"\"\n    categories: list = df_data[by].unique() if isinstance(by, str) else ['']\n    num_plots: int = len(categories)*(len(df_data.columns)-1) if isinstance(by, str) else len(df_data.columns)\n    ncol_fig: int = ncol_fig if isinstance(ncol_fig, int) else ceil(sqrt(num_plots))\n    nrow_fig: int = ceil(num_plots / ncol_fig)\n    fig, axes = plt.subplots(nrows=nrow_fig, ncols=ncol_fig, figsize=(5*ncol_fig, 5*nrow_fig))\n    axes = axes.flatten() \n    axes_index: int = 0   \n\n    for name in categories:\n        plot_data: pd.DataFrame = df_data.query(f\"{by} == '{name}'\").drop(columns=[by]) if isinstance(by, str) else df_data\n\n        for col in plot_data.columns:\n            statistic, p_value = shapiro(plot_data[col])\n            shapiro_info: str = f\"    Shapiro-Wilk\\n\" +\\\n                                f\"Statistic:  {statistic:.5f}\\n\"+\\\n                                f\"P-Value:   {p_value:.5f}\"\n            qqplot(plot_data[col], ax=axes[axes_index], confidence=confidence)\n            axes[axes_index].set_title(f'{name}', fontsize=10)\n            axes[axes_index].text(0.02, 0.98, shapiro_info, transform=axes[axes_index].transAxes, fontsize=9, ha='left', va='top')\n            axes_index += 1\n\n    [fig.delaxes(ax) for ax in axes[-ncol_fig:] if not ax.has_data()]\n\n    if main_label:\n        fig.suptitle(f\"Quantile-Quantile Plots for {''.join(df_data.columns.difference(['Species']))}\", fontsize=10)\n        fig.supxlabel(\"Theoretical quantiles\", fontsize=10)\n        fig.supylabel(\"Ordered quantiles\", fontsize=10)\n        [ax.set(xlabel='', ylabel='') for ax in axes]\n    else:\n        fig.suptitle(*df_data.columns.difference(['Species']))\n    \n    return fig\n\nui.page_opts(title='Iris Dashboard By Jordan', fillable=True)\n\nwith ui.sidebar(title='Iris Dataset'):\n\n    with ui.value_box(\n        showcase=icon_svg(\"leaf\"),\n        theme=\"bg-gradient-green-teal\",\n    ):\n        \"Unique Iris Species\"\n\n        @render.text\n        def display_unique():\n            return len(iris_df['Species'].unique())\n        \n    ui.input_select(\n        'selected_variable',\n        'Select Variable:',\n        choices = continuous_variables,\n        selected = continuous_variables[0]\n    )\n\n    ui.hr()\n    ui.a(\"GitHub\", href=\"https://github.com/JfromNWMS/cintel-06-custom\", target=\"_blank\")\n\nwith ui.layout_columns(max_height=\"50%\"):\n\n    with ui.card(full_screen=True):\n        ui.card_header('Full Dataset')\n\n        @render.data_frame\n        def datagrid_one():\n            return render.DataGrid(iris_df)\n        \n    with ui.card(full_screen=True):\n        ui.card_header('Summary Statistics of Full Dataset')\n\n        @render.data_frame\n        def datagrid_two():\n            df_summary = format_describe(iris_df.describe()).reset_index()\n            df_summary.rename(columns={'index': ' '}, inplace=True)\n            return render.DataGrid(df_summary)\n\n\nwith ui.layout_columns():\n\n    with ui.card(full_screen=True):\n        ui.card_header(f'Normality By Species')\n\n        @render.plot\n        def normality():\n            return is_norm_small(df_data=filtered_data(), by='Species', ncol_fig=3, main_label=True)\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Boxplot and Summary Statistics By Species\")\n\n        @render.plot\n        def box_summary():\n            fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(6, 3))\n            axes = axes.flatten()\n            sns.boxplot(\n                x='Species', y=input.selected_variable(), data=iris_df, hue='Species', ax=axes[0], showmeans=True, \n                meanprops={'marker':'o', 'markerfacecolor':'lightslategrey', 'markeredgecolor':'darkslategrey'}\n            )\n            plot_df = iris_df[['Species', input.selected_variable()]].groupby('Species').describe().T\n            plot_df.index = plot_df.index.droplevel(0)\n            plot_df = format_describe(plot_df)\n            axes[1].text(\n                0.5, 0.4, \n                plot_df.to_string().replace('ca', 'ca\\n').replace('es', 'es:'),\n                horizontalalignment = 'center',\n                verticalalignment = 'center',\n                fontfamily = 'monospace',\n                fontdict = {'fontsize': 10}\n            )\n            axes[1].axis('off')\n            axes[1].set_title(input.selected_variable(), y=0.83, fontfamily='sans-serif', fontsize=11)\n            fig.tight_layout(w_pad=3)\n            return fig\n\n@reactive.calc\ndef filtered_data():\n    return iris_df[['Species', input.selected_variable()]]   ", "type": "text"}]