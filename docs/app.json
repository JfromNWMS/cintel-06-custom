[{"name": "app.py", "content": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pingouin import qqplot\nfrom scipy.stats import shapiro\nfrom math import ceil, sqrt\nfrom shiny.express import ui, input, render\nfrom shiny import reactive\nfrom faicons import icon_svg\n\niris_df = sns.load_dataset('iris')\niris_df.columns = [col_name.replace('_',' ').title() for col_name in iris_df.columns] \niris_df = iris_df.apply(lambda col: col.apply(lambda x: x.replace('_',' ').title()) if col.dtype == 'object' else col)\ncontinuous_variables = [name for name in iris_df.columns if name != 'Species']\n\nformat_dict: dict = {\n    'count': '{:.0f}'.format,\n    'min': '{:.1f}'.format,\n    'max': '{:.1f}'.format,\n    'std': '{:.3f}'.format,\n    'default': '{:.2f}'.format\n}\n\ndef format_describe(df_data: pd.DataFrame) -> pd.DataFrame:\n    return df_data.apply(lambda row: row.map(format_dict.get(row.name, format_dict['default'])), axis=1)\n\ndef is_norm_small(df_data: pd.DataFrame, by: str = None, ncol_fig: int = None, main_label: bool = True, confidence: float = 0.95) -> None:\n    \"\"\"\n    Function is_norm_small() takes in a pandas.DataFrame and plots normal Q-Q plots \n    for all columns of the dataframe in square configuration. The Shapiro-Wilk normality\n    test statistic and p-value are also calculated for each plot and placed in the upper \n    left corner of the plot.\n\n    Args:\n        df_data (pd.DataFrame): Input dataframe whose columns will be plotted over.\n        by (str): Name of categorical column in dataframe to plot by. Defaults to no categorical column.\n        ncol_fig (int): Number of columns to force the plot figure too.  Defaults to square configuration.\n        main_label (bool): True to remove the axis names from individual plots and places them as titles for main figure axes.\n        confidence (float): Level of confidence between 0 and 1 at which confidence intervals are displayed.\n    \"\"\"\n    categories: list = df_data[by].unique() if isinstance(by, str) else ['']\n    num_plots: int = len(categories)*(len(df_data.columns)-1) if isinstance(by, str) else len(df_data.columns)\n    ncol_fig: int = ncol_fig if isinstance(ncol_fig, int) else ceil(sqrt(num_plots))\n    nrow_fig: int = ceil(num_plots / ncol_fig)\n    fig, axes = plt.subplots(nrows=nrow_fig, ncols=ncol_fig, figsize=(5*ncol_fig, 5*nrow_fig))\n    axes = axes.flatten() \n    axes_index: int = 0   \n\n    for name in categories:\n        plot_data: pd.DataFrame = df_data.query(f\"{by} == '{name}'\").drop(columns=[by]) if isinstance(by, str) else df_data\n\n        for col in plot_data.columns:\n            statistic, p_value = shapiro(plot_data[col])\n            shapiro_info: str = f\"    Shapiro-Wilk\\n\" +\\\n                                f\"Statistic:  {statistic:.5f}\\n\"+\\\n                                f\"P-Value:   {p_value:.5f}\"\n            qqplot(plot_data[col], ax=axes[axes_index], confidence=confidence)\n            axes[axes_index].set_title(f'{name}', fontsize=10)\n            axes[axes_index].text(0.02, 0.98, shapiro_info, transform=axes[axes_index].transAxes, fontsize=9, ha='left', va='top')\n            axes_index += 1\n\n    [fig.delaxes(ax) for ax in axes[-ncol_fig:] if not ax.has_data()]\n\n    if main_label:\n        fig.suptitle(f\"Quantile-Quantile Plots for {''.join(df_data.columns.difference(['Species']))}\", fontsize=10)\n        fig.supxlabel(\"Theoretical quantiles\", fontsize=10)\n        fig.supylabel(\"Ordered quantiles\", fontsize=10)\n        [ax.set(xlabel='', ylabel='') for ax in axes]\n    else:\n        fig.suptitle(*df_data.columns.difference(['Species']))\n    \n    return fig\n\nui.page_opts(title='Iris Dashboard By Jordan', fillable=True)\n\nwith ui.sidebar(title='Iris Dataset'):\n\n    with ui.value_box(\n        showcase=icon_svg(\"leaf\"),\n        theme=\"bg-gradient-green-teal\",\n    ):\n        \"Unique Iris Species\"\n\n        @render.text\n        def display_unique():\n            return len(iris_df['Species'].unique())\n        \n    ui.input_select(\n        'selected_variable',\n        'Select Variable:',\n        choices = continuous_variables,\n        selected = continuous_variables[0]\n    )\n\n    ui.hr()\n    ui.a(\"GitHub\", href=\"https://github.com/JfromNWMS/cintel-06-custom\", target=\"_blank\")\n\nwith ui.layout_columns(max_height=\"50%\"):\n\n    with ui.card(full_screen=True):\n        ui.card_header('Full Dataset')\n\n        @render.data_frame\n        def datagrid_one():\n            return render.DataGrid(iris_df)\n        \n    with ui.card(full_screen=True):\n        ui.card_header('Summary Statistics of Full Dataset')\n\n        @render.data_frame\n        def datagrid_two():\n            df_summary = format_describe(iris_df.describe()).reset_index()\n            df_summary.rename(columns={'index': ' '}, inplace=True)\n            return render.DataGrid(df_summary)\n\n\nwith ui.layout_columns():\n\n    with ui.card(full_screen=True):\n        ui.card_header(f'Normality By Species')\n\n        @render.plot\n        def normality():\n            return is_norm_small(df_data=filtered_data(), by='Species', ncol_fig=3, main_label=True)\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Boxplot and Summary Statistics By Species\")\n\n        @render.plot\n        def box_summary():\n            fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(6, 3))\n            axes = axes.flatten()\n            sns.boxplot(\n                x='Species', y=input.selected_variable(), data=iris_df, hue='Species', ax=axes[0], showmeans=True, \n                meanprops={'marker':'o', 'markerfacecolor':'lightslategrey', 'markeredgecolor':'darkslategrey'}\n            )\n            plot_df = iris_df[['Species', input.selected_variable()]].groupby('Species').describe().T\n            plot_df.index = plot_df.index.droplevel(0)\n            plot_df = format_describe(plot_df)\n            axes[1].text(\n                0.5, 0.4, \n                plot_df.to_string().replace('ca', 'ca\\n').replace('es', 'es:'),\n                horizontalalignment = 'center',\n                verticalalignment = 'center',\n                fontfamily = 'monospace',\n                fontdict = {'fontsize': 10}\n            )\n            axes[1].axis('off')\n            axes[1].set_title(input.selected_variable(), y=0.83, fontfamily='sans-serif', fontsize=11)\n            fig.tight_layout(w_pad=3)\n            return fig\n\n@reactive.calc\ndef filtered_data():\n    return iris_df[['Species', input.selected_variable()]]   ", "type": "text"}, {"name": "requirements.txt", "content": "# In this file, ignore hashes (#) - they are just used to create comments.\n# Lines starting with a hash are ignored when installing packages using this file. \n\n# ======================================================\n# STEP A - CREATE A LOCAL PROJECT VIRTUAL ENV (.venv)\n# ======================================================\n\n# This option uses the most current or default Python -\n# if an older version is required, use the ADVANCED OPTION below. \n\n# Create your local project virtual environment\n# This step ensures you have an isolated Python environment for your project.\n# This is typically just done once at the beginning of a project.\n# If it gets messed up, we can delete .venv and recreate it at any time. \n\n# Run the following command to create a virtual environment in the project root.\n### On Windows, Use PowerShell (not cmd) - don't include the #:\n# py -m venv .venv\n\n### On Mac/Linux, Use zsh or bash (or PowerShell) - don't include the #:\n# python3 -m venv .venv\n\n### If VS Code asks: We noticed a new environment has been created. \n# Do you want to select it for the workspace folder?\n# Click Yes. \n\n# ======================================================\n# STEP A (ADVANCED OPTION) - ONLY WHEN OLDER PYTHON VERSION IS REQUIRED\n# ======================================================\n\n### IMPORTANT: \n### If the project requires a large tool like Apache Kafka,\n### we may need to install an earlier version of Python\n### and specify the required version when we create the virtual environment. \n### On Windows, Use PowerShell (not cmd) - don't include the #:\n# py -3.11 -m venv .venv\n### On Mac  - don't include the #:\n# brew install python@3.11\n# python3 -m venv .venv\n### On Linux/WSL - don't include the #:\n# sudo apt update\n# sudo apt install python3.11 python3.11-venv\n# python3.11 -m venv .venv\n\n# ======================================================\n# STEP B - ALWAYS ACTIVATE THE (.venv) WHEN OPENING A NEW TERMINAL\n# ======================================================\n\n# ALWAYS activate the .venv before working on the project.\n# Activate whenever you open a new terminal. \n\n### Windows PowerShell Command (don't include the #):\n# .\\.venv\\Scripts\\activate\n\n### Mac/Linux/WSL Command (don't include the #):\n# source .venv/bin/activate\n\n# Verify: When active, you can usually see (.venv) in the terminal.\n\n# If using a Jupyter notebook, select the kernel associated with your project (.venv).\n\n# ======================================================\n# STEP C - INSTALL PACKAGES INTO (.venv) AS NEEDED\n# ======================================================\n\n# Install necessary packages listed below with this command:\n# Keep packages updated with the most recent versions.\n\n# When you identify a new package you want to use, \n# Just update the list below and re-run this command. \n\n### Windows Command (don't include the #):\n# py -m pip install --upgrade pip setuptools wheel\n# py -m pip install --upgrade -r requirements.txt --timeout 100\n\n### Mac/Linux/WSL Command (don't include the #):\n# python3 -m pip install --upgrade pip setuptools wheel\n# python3 -m pip install --upgrade -r requirements.txt --timeout 100\n\n# When you identify a new package you want to use, \n# Just update the list below and re-run the install command. \n\n# ======================================================\n# STEP D: VS CODE - Select Interpreter \n# ======================================================\n# VS Code needs our populated .venv to interpret our files correctly.\n# To set the VS Code Interpreter:\n# 1. Open the Command Palette: Press Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac).\n# 2. Search for \"Python: Select Interpreter\":\n# 3. Type Python: Select Interpreter in the Command Palette search bar and select it from the dropdown.\n# 4. Choose an Interpreter - A list of available Python environments will appear.\n#    Look for the local .venv option.\n# 5. Once selected, check the Python version displayed \n#    in the bottom-left corner of the VS Code window in the status bar.\n\n# ======================================================\n# STEP E: OPTIONAL: If Using Notebook, Select Kernel\n# ======================================================\n# To select a kernel (Python environment) for your notebook in Visual Studio Code, \n# click on the Select Kernel name in the top-right corner of the notebook \n# interface and choose the desired kernel from the dropdown menu. \n# Follow any suggestions to install recommended extensions. \n# Once installed, click \"Select Kernel\" / \"Python Environments\" and choose the \n# recommended (.venv) option created for the project. \n# This will create a new kernel for the notebook and allow you to run code\n# in the notebook using the packages installed in the virtual environment.\n# After installing any new packages, you may need to close all instances of VS Code\n# and restart completely to have your updated environment take effect. \n\nshiny\nshinylive\npandas\nmatplotlib\nseaborn\nshinywidgets\nscipy\npingouin\nfaicons", "type": "text"}]